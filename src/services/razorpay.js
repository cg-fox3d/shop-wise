
/**
 * Represents the details required to create a Razorpay order.
 * @typedef {object} OrderDetails
 * @property {number} amount - The amount for which the order is created, in the smallest currency unit (e.g., paise for INR).
 * @property {string} currency - The currency in which the amount is specified (e.g., 'INR').
 */

/**
 * Represents the response from Razorpay after creating an order.
 * This should match the actual response structure from your backend.
 * @typedef {object} RazorpayOrder
 * @property {string} id - The unique identifier for the order created in Razorpay.
 * @property {number} amount - The amount of the order in the smallest currency unit.
 * @property {string} currency - The currency of the order.
 * @property {string} status - The status of the order (e.g., 'created', 'paid').
 * // Add other relevant fields returned by your backend
 */

/**
 * Asynchronously creates a Razorpay order by calling your backend API.
 *
 * @param {OrderDetails} orderDetails The details required to create the order, including amount (in paise) and currency.
 * @returns {Promise<RazorpayOrder>} A promise that resolves to a RazorpayOrder object containing the order details from your backend.
 * @throws {Error} If the backend API call fails or returns an error.
 */
export async function createRazorpayOrder(orderDetails) {
  // console.log("Attempting to create order with details:", orderDetails); // Removed debug log

  try {
    const response = await fetch('https://numbers-guru.netlify.app/.netlify/functions/create-order', { // Your backend endpoint
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(orderDetails),
    });

    if (!response.ok) {
      let errorMessage = `HTTP error! status: ${response.status}`;
      let errorPayload;
      try {
        errorPayload = await response.json();
        console.log("Backend error (JSON):", errorPayload); // Keep for detailed error
        if (errorPayload && errorPayload.message) {
          errorMessage = errorPayload.message;
        }
      } catch (jsonError) {
        try {
            const errorText = await response.text();
            console.log("Backend error (Text):", errorText); // Keep for detailed error
            if (errorText) {
              errorMessage = errorText.length > 300 ? errorText.substring(0, 300) + "..." : errorText;
            }
        } catch (textError) {
             console.log("Backend error (Non-JSON, Non-Text): Could not parse error response body."); // Keep for detailed error
        }
      }
      throw new Error(errorMessage);
    }

    const orderData = await response.json();
    // console.log("Order created successfully:", orderData); // Removed debug log
    return orderData.order;

  } catch (error) {
    console.error("Failed to create Razorpay order:", error); // Keep
    if (error instanceof Error) {
        throw error;
    } else {
        throw new Error(String(error) || "An unknown error occurred during order creation.");
    }
  }
}

/**
 * Represents the details required to verify a Razorpay payment on your backend.
 * @typedef {object} PaymentVerificationDetails
 * @property {string} razorpay_order_id - The unique identifier for the Razorpay order.
 * @property {string} razorpay_payment_id - The unique identifier for the Razorpay payment.
 * @property {string} razorpay_signature - The signature generated by Razorpay for the payment.
 */

/**
 * Asynchronously verifies the payment signature by calling your backend API.
 *
 * @param {PaymentVerificationDetails} verificationDetails The details required to verify the payment.
 * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the payment is verified.
 * @throws {Error} If the backend API call fails or verification fails.
 */
export async function verifyPayment(verificationDetails) {
  // console.log("Attempting to verify payment with details:", verificationDetails); // Removed debug log

  try {
    const response = await fetch('https://numbers-guru.netlify.app/.netlify/functions/verify-payment', { // Your backend endpoint
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(verificationDetails),
    });

     if (!response.ok) {
       let errorMessage = `HTTP error! status: ${response.status}`;
       let errorPayload;
       try {
         errorPayload = await response.json();
         console.log("Backend error (JSON):", errorPayload); // Keep for detailed error
         if (errorPayload && errorPayload.message) {
           errorMessage = errorPayload.message;
         }
       } catch (jsonError) {
         try {
             const errorText = await response.text();
             console.log("Backend error (Text):", errorText); // Keep for detailed error
             if (errorText) {
                errorMessage = errorText.length > 300 ? errorText.substring(0, 300) + "..." : errorText;
             }
         } catch (textError) {
              console.log("Backend error (Non-JSON, Non-Text): Could not parse error response body for payment verification."); // Keep for detailed error
         }
       }
       throw new Error(errorMessage);
     }

     const verificationResult = await response.json();
     // console.log("Payment verification result:", verificationResult); // Removed debug log
     return verificationResult.success;

   } catch (error) {
     console.error("Failed to verify Razorpay payment:", error); // Keep
     if (error instanceof Error) {
        throw error;
    } else {
        throw new Error(String(error) || "An unknown error occurred during payment verification.");
    }
   }
}
